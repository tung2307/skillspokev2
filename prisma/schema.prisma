// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Store {
    id           String         @id @default(uuid())
    userId       String         @default("none")
    name         String
    remote       Boolean        @default(false)
    phone        String?
    address1     String?
    address2     String?
    ward         String?
    district     String
    city         String
    country      String         @default("viá»‡t nam")
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    storePicture StorePicture[]

    @@index([userId])
}

model StorePicture {
    id        String   @id @default(uuid())
    storeId   String
    fileUrl   String
    fileName  String
    createdAt DateTime @default(now())
    store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)

    @@index([storeId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(CUSTOMER)
    accounts      Account[]
    sessions      Session[]

    // Non- Next auth
    profile Profile[]
    stores  Store[]
}

model Profile {
    id     String @id @default(uuid())
    bio    String
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

enum Role {
    CUSTOMER
    PRO
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
