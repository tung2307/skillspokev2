// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Store {
    id            String          @id @default(uuid())
    userId        String          @default("none")
    name          String
    service       String
    remote        Boolean         @default(false)
    phone         String?
    address1      String?
    address2      String?
    ward          String?
    district      String
    city          String
    country       String          @default("Viá»‡t Nam")
    introduction  String?         @db.Text
    verify        Boolean?        @default(false)
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    storePicture  StorePicture[]
    Review        Review[]
    StoreFavorite StoreFavorite[]
    ReviewComment ReviewComment[]
    StoreProject  StoreProject[]
}

model Review {
    id            String          @id @default(cuid())
    clerkId       String
    storeId       String
    rating        Int
    description   String          @db.Text
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    store         Store           @relation(fields: [storeId], references: [id], onDelete: Cascade)
    user          User            @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)
    ReviewComment ReviewComment[]

    @@index([storeId])
    @@index([clerkId])
}

model ReviewComment {
    id          String   @id @default(uuid())
    reviewId    String // Reference to the Review
    userId      String // The user who made the comment on the review
    description String   @db.Text
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    review      Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    Store       Store?   @relation(fields: [storeId], references: [id])
    storeId     String?

    @@index([reviewId])
    @@index([userId])
    @@index([storeId])
}

model StoreFavorite {
    id        String   @id @default(uuid())
    storeId   String
    clerkId   String
    createdAt DateTime @default(now())
    store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
    user      User     @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)

    @@unique([storeId, clerkId])
    @@index([storeId])
    @@index([clerkId])
}

model StoreProject {
    id             String           @id @default(uuid())
    storeId        String
    clerkId        String
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    title          String
    description    String           @db.Text
    store          Store            @relation(fields: [storeId], references: [id], onDelete: Cascade)
    user           User             @relation(fields: [clerkId], references: [clerkId], onDelete: Cascade)
    ProjectPicture ProjectPicture[]

    @@index([storeId])
    @@index([clerkId])
}

model ProjectPicture {
    id           String       @id @default(uuid())
    projectId    String
    fileUrl      String
    fileKey      String
    createdAt    DateTime     @default(now())
    storeProject StoreProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@index([projectId])
}

model StorePicture {
    id        String   @id @default(uuid())
    storeId   String
    fileUrl   String
    fileKey   String
    createdAt DateTime @default(now())
    store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)

    @@index([storeId])
}

model User {
    id      String  @id @default(cuid())
    clerkId String  @unique
    name    String?
    role    Role    @default(CUSTOMER)

    // Non- Next auth
    profile       Profile[]
    Review        Review[]
    StoreFavorite StoreFavorite[]
    ReviewComment ReviewComment[]
    StoreProject  StoreProject[]
}

model Profile {
    id     String @id @default(uuid())
    bio    String
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

enum Role {
    CUSTOMER
    PRO
}
